<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>安装intel编译器</title>
    <url>/2020/05/30/%E5%AE%89%E8%A3%85intel%E7%BC%96%E8%AF%91%E5%99%A8/</url>
    <content><![CDATA[<p>进入到intel的目录之后，使用install.sh进行安装</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200530115750225.png" alt="image-20200530115750225"></p>
<p>按照提示来选择就行，这里需要注意一下，选择使用文件来获取验证</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200530120017185.png" alt="image-20200530120017185"></p>
<p>license文件在如下目录中，从其中选择一个，如果不行就换一个，我用的时候，_c是能用的</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200530120209810.png" alt="image-20200530120209810"></p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200530120402600.png" alt="image-20200530120402600"></p>
<p>通过选择这个来自定义安装的路径，这里面有多个安装的设置，我们只修改安装的路径就行了</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200530120456566.png" alt="image-20200530120456566"></p>
<p>这里就是修改安装路径的设置</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200530120531399.png" alt="image-20200530120531399"></p>
<p>这里我安装到了asc目录下的intel目录，在这里使用tab的时候，之前的输入会保留，所以有上面的那两个留下来的路径</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200530120647158.png" alt="image-20200530120647158"></p>
<p>安装过程中可能回出现缺少依赖之类的问题，如果能跳过，那么直接跳过就行，如果不能跳过，就google一下，然后安装，比如遇到</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xorg x11 server is not found的问题</span></span><br><span class="line">sudo apt-get install xorg openbox</span><br></pre></td></tr></table></figure>

<p>看到这个就是安装完成了</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200530121824836.png" alt="image-20200530121824836"></p>
<p>最后在这个目录下找到了icc，将其配置到环境变量中就算是完成了</p>
<p><img src="E:%5Chexo%5Csource%5C_posts%5C%E5%AE%89%E8%A3%85intel%E7%BC%96%E8%AF%91%E5%99%A8.assets%5C20200530124016.png" alt=""></p>
<p>配置好环境变量之后，可能会出现A license for Comp-CL could not be obtained的错误</p>
<p><img src="E:%5Chexo%5Csource%5C_posts%5C%E5%AE%89%E8%A3%85intel%E7%BC%96%E8%AF%91%E5%99%A8.assets%5C20200530124124.png" alt=""></p>
<p>可以看到在最后一个的路径中有个 *.lic的结尾，所以将我们之前用的那个License复制到那个目录下面就行了</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200530123332242.png" alt="image-20200530123332242"></p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200530123346005.png" alt="image-20200530123346005"></p>
<p>大功告成！！！</p>
]]></content>
  </entry>
  <entry>
    <title>最最基础Java后端</title>
    <url>/2020/04/23/%E6%9C%80%E6%9C%80%E5%9F%BA%E7%A1%80Java%E5%90%8E%E7%AB%AF/</url>
    <content><![CDATA[<h1 id="最最基础Java后端"><a href="#最最基础Java后端" class="headerlink" title="最最基础Java后端"></a>最最基础Java后端</h1><p>最最基础的Java后端，仅供了解后端运作的过程，里面的方法和套路拿来就能实现一个Java后端，但深入需要学习额外的知识，比如Servlet和JDBC，文中除Java基础知识外，只涉及这两方面的知识，学习了Servlet和JDBC之后，可以了解Java后端的运作过程，对学习Spring和Mybatis等知识都有帮助</p>
<a id="more"></a>

<h1 id="整体理解"><a href="#整体理解" class="headerlink" title="整体理解"></a>整体理解</h1><p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/20200423105928.png" alt=""></p>
<h1 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h1><p>过程已经在图中展示出来，这里直接贴出代码实现，里面有详细的注释</p>
<h2 id="Servlet代码："><a href="#Servlet代码：" class="headerlink" title="Servlet代码："></a>Servlet代码：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SearchServlet</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取名称,使用getParameter获取URL中对应的键值对</span></span><br><span class="line">        <span class="comment">//如url=http:xxx/xxx?name=hello ，那么这里获取出来的name就是hello</span></span><br><span class="line">        String name = req.getParameter(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(<span class="string">"name = "</span> + name);</span><br><span class="line">        Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">        List&lt;Rubbish&gt; Rubbishes = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//分发任务，使用Dao中的方法，Rubbishes就是从数据库中返回的结果</span></span><br><span class="line">            Rubbishes = <span class="keyword">new</span> SearchDao().findRubbish(name);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将数据转换为json返回</span></span><br><span class="line">        Type type = <span class="keyword">new</span> TypeToken&lt;List&lt;Rubbish&gt;&gt;() &#123;</span><br><span class="line">        &#125;.getType();</span><br><span class="line">        <span class="keyword">assert</span> Rubbishes != <span class="keyword">null</span>;</span><br><span class="line">        String jsonstr = gson.toJson(Rubbishes, type);</span><br><span class="line">        resp.setContentType(jsonstr);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"gbk"</span>);</span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line">        out.println(jsonstr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h2><p>通过web.xml将对URL的访问与代码对应起来</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SearchServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.search.servlet.SearchServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SearchServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/search<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Domain"><a href="#Domain" class="headerlink" title="Domain"></a>Domain</h1><p>Domain是一个实体类，用于保存从数据库中获取的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rubbish</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> kind;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getKind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> kind;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKind</span><span class="params">(<span class="keyword">int</span> kind)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.kind = kind;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h1><p>用于连接程序和数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">SearchDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Rubbish&gt; <span class="title">findRubbish</span><span class="params">(String name)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Connection conn = ConnectionUtil.open();</span><br><span class="line">        <span class="comment">//定义访问数据库的方式</span></span><br><span class="line">        String sql = <span class="string">"select * from label_garbage where garbage_name like '%"</span> + name + <span class="string">"%'"</span>;</span><br><span class="line">        <span class="comment">//访问数据库</span></span><br><span class="line">        PreparedStatement pstmt = conn.prepareStatement(sql);</span><br><span class="line">        ResultSet rs = pstmt.executeQuery();</span><br><span class="line">        ArrayList&lt;Rubbish&gt;sRubbishes=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//获取数据库中的系列元素</span></span><br><span class="line">        <span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">            Rubbish aRubbish = <span class="keyword">new</span> Rubbish();</span><br><span class="line">            aRubbish.setName(rs.getString(<span class="string">"garbage_name"</span>));</span><br><span class="line">            aRubbish.setKind(rs.getInt(<span class="string">"garbage_kind"</span>));</span><br><span class="line">            sRubbishes.add(aRubbish);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  sRubbishes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>里面用到的ConnectionUtil方法，用于打开数据库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义连接数据库的地址以及对应的数据库，这里是访问本地的test库</span></span><br><span class="line">        String url = <span class="string">"jdbc:mysql://localhost:3306/test?useSSL=false&amp;serverTimezone=UTC"</span>;</span><br><span class="line">        <span class="comment">// 不同的数据库有着不同的driver，这里是mysql的driver</span></span><br><span class="line">        String driver = <span class="string">"com.mysql.cj.jdbc.Driver"</span>;</span><br><span class="line">        String username = <span class="string">"root"</span>;</span><br><span class="line">        String password = <span class="string">"root"</span>;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(driver);</span><br><span class="line">            System.out.println(<span class="string">"数据库连接成功"</span>);</span><br><span class="line">            connection = (Connection) DriverManager.getConnection(url, username, password);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                conn = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="完整的目录结构"><a href="#完整的目录结构" class="headerlink" title="完整的目录结构"></a>完整的目录结构</h1><p>完整的目录结构如下，有些依赖包需要你自己添加</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200423111829360.png" alt="image-20200423111829360"></p>
]]></content>
      <categories>
        <category>知识</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>idea打包web项目为war包，并部署到服务器的正确做法（图文详细教程）</title>
    <url>/2020/04/23/idea%E6%89%93%E5%8C%85web%E9%A1%B9%E7%9B%AE%E4%B8%BAwar%E5%8C%85%EF%BC%8C%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%81%9A%E6%B3%95%EF%BC%88%E5%9B%BE%E6%96%87%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B%EF%BC%89/</url>
    <content><![CDATA[<p>在网上找了很久，发现很多方法是错误的，有的连web.xml文件以及classes文件夹、lib文件夹都没生成。同时在部署过程中还出现本地调试正常，但是放到服务器上就不能访问的问题。因此有很多注意事项，写下这篇博客以作记录。</p>
<a id="more"></a>

<h1 id="Idea打包web项目为war包（详细图文步骤）"><a href="#Idea打包web项目为war包（详细图文步骤）" class="headerlink" title="Idea打包web项目为war包（详细图文步骤）"></a>Idea打包web项目为war包（详细图文步骤）</h1><ol>
<li>打开Projec Structure</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200422233609802.png" alt="image-20200422233609802"></p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200427105209116.png" alt="image-20200427105209116"></p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200427103536336.png" alt="image-20200427103536336"></p>
<p>在war中导入的包最后和本地的包是一样的，所以如果出现包依赖的冲突，那么就清理一下本地的包，比如我之前就是在本地添加了重复的tomcat依赖包，导致在本地可以运行，上传到服务器上就不行了</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200427105349523.png" alt="image-20200427105349523"></p>
<ol start="4">
<li><p>开始生成war包</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200423001109448.png" alt="image-20200423001109448"></p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200423001247547.png" alt="image-20200423001247547"></p>
</li>
</ol>
<p>   <img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200423085023916.png" alt="image-20200423085023916"></p>
<p>   创建完成之后就可以在out目录下看到war包了</p>
<h1 id="将war部署到服务器上"><a href="#将war部署到服务器上" class="headerlink" title="将war部署到服务器上"></a>将war部署到服务器上</h1><h2 id="将war包上传到服务器tomcat的webapps目录下"><a href="#将war包上传到服务器tomcat的webapps目录下" class="headerlink" title="将war包上传到服务器tomcat的webapps目录下"></a>将war包上传到服务器tomcat的webapps目录下</h2><p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200423085808759.png" alt="image-20200423085808759"></p>
<p>因为我是放到了另一个端口，所以我这里是放到了webapps1目录下，如果你只有这一个web程序，那么直接放到webapps下就行了，如果你有多个web程序要放到同一个tomcat服务器中，那么可以参考这篇文章：<a href="https://zhuanlan.zhihu.com/p/110901299" target="_blank" rel="noopener">一个 tomcat 下如何部署多个项目？附详细步骤</a></p>
<h2 id="重启tomcat"><a href="#重启tomcat" class="headerlink" title="重启tomcat"></a>重启tomcat</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在tomcat的 bin 目录下操作</span></span><br><span class="line">./shutdown.sh		<span class="comment"># 关闭tomcat</span></span><br><span class="line">ps -ef | grep java	<span class="comment"># 查看是否关闭成功	</span></span><br><span class="line">./start.sh			<span class="comment"># 开启tomcat</span></span><br></pre></td></tr></table></figure>

<p>tomcat关闭的时候</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200423090557438.png" alt="image-20200423090557438"></p>
<p>tomcat开启的时候</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200423090654842.png" alt="image-20200423090654842"></p>
<p>这样就可以通过ip:8080/项目名来进行访问了</p>
<p>ps：如果ip:8080/项目名可以访问成功，但是访问具体的服务失败时，可能是因为你本地的jdk版本和服务器的jdk版本不同，是你的jdk版本高于服务器jdk版本，那么就不用重新安装jdk，因为jdk是向下兼容的，只需要在idea中设置编译版本就行了</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200423091034331.png" alt="image-20200423091034331"></p>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何获取MIPS汇编对应的机器码</title>
    <url>/2020/04/18/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96MIPS%E6%B1%87%E7%BC%96%E5%AF%B9%E5%BA%94%E7%9A%84%E6%9C%BA%E5%99%A8%E7%A0%81/</url>
    <content><![CDATA[<p>在看《自己动手写CPU》的时候，里面需要将MIPS转换成机器码作为输入的指令，不过书上的工具以及一些步骤在实际中是不能用的，因此在这里将“从MIPS汇编转换成机器码”的完整过程下来</p>
<a id="more"></a>

<h1 id="安装Linux虚拟机"><a href="#安装Linux虚拟机" class="headerlink" title="安装Linux虚拟机"></a>安装Linux虚拟机</h1><p>因为汇编工具需要在Linux的环境下运行，所以需要安装Linux虚拟机，我用的软件是VMware，Linux系统是Ubuntu 18.04，具体的安装过程网上有很多教程，这里就不再详细的叙述了</p>
<h1 id="安装GNU工具链"><a href="#安装GNU工具链" class="headerlink" title="安装GNU工具链"></a>安装GNU工具链</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>百度云下载链接：<a href="https://pan.baidu.com/s/13RMZTfJNdQwe6hTz2S8Ndw" target="_blank" rel="noopener">https://pan.baidu.com/s/13RMZTfJNdQwe6hTz2S8Ndw</a><br>提取码：9z9w</p>
<h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>下载完成解压之后，在根目录使用vi .bashrc修改.bashrc的内容，在最后一行添加 export PATH=“$PATH:[工具链解压路径]/bin”，如下图所示</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200418090237074.png" alt="image-20200418090237074"></p>
<p>添加完成之后重启系统，重启完成后打开终端输入mips-linux-gnu-，然后按两次tab键就会列出刚刚安装的所有编译工具</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200418090612762.png" alt="image-20200418090612762"></p>
<p>这样，安装就算完成了，如果没有出现编译工具，那么应该是环境变量没有添加成功，请自行在网上搜索如何添加环境变量</p>
<h2 id="我们会用到的GNU汇编工具"><a href="#我们会用到的GNU汇编工具" class="headerlink" title="我们会用到的GNU汇编工具"></a>我们会用到的GNU汇编工具</h2><p>（前面都有mips-linux-gnu-前缀）</p>
<p>as: GNU汇编器，用来将汇编程序编译为目标文件</p>
<p>ld: GNU链接器，将目标文件通过ld链接、重定位数据生成可执行文件</p>
<p>objdump: 用于列出关于二进制文件的各种信息</p>
<h1 id="使用GNU工具链进行编译"><a href="#使用GNU工具链进行编译" class="headerlink" title="使用GNU工具链进行编译"></a>使用GNU工具链进行编译</h1><h2 id="新建一个汇编程序文件"><a href="#新建一个汇编程序文件" class="headerlink" title="新建一个汇编程序文件"></a>新建一个汇编程序文件</h2><p>文件名为inst_rom.S(因为我是用来生成指令的，你可以替换为相应的文件)，文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.org 0x0		#程序从地址0x0开始</span><br><span class="line">.global _start	#定义一个全局符号 _start</span><br><span class="line">.set noat		#允许使用寄存器 $1</span><br><span class="line">_start:</span><br><span class="line">    ori $1,$0,0xf</span><br><span class="line">    mtc0 $1,$11,0x0</span><br><span class="line"></span><br><span class="line">    lui $1,0x1000</span><br><span class="line">    ori $1,$1,0x401</span><br><span class="line">    mtc0 $1,$12,0x0</span><br><span class="line">    mfc0 $2,$12,0x0</span><br><span class="line"></span><br><span class="line">_loop:</span><br><span class="line">    j _loop</span><br><span class="line">    sync</span><br></pre></td></tr></table></figure>

<p>一个简单的mips汇编程序</p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mips-linux-gnu-as -mips32 inst_rom.S -o inst_rom.o</span><br></pre></td></tr></table></figure>

<p>使用 as 来进行编译，“-mips32” 选项表示按照MIPS32 指令集架构进行编译，”-o” 选项用于指令生成的目标文件</p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>使用 ld 来进行链接，在 ld 的参数中需要声明一个链接描述脚本，链接描述脚本用于描述输入文件各个Section如何映射到输出文件的各个Section中，并控制输出文件中Section和符号的内存布局</p>
<h2 id="新建一个链接描述脚本文件"><a href="#新建一个链接描述脚本文件" class="headerlink" title="新建一个链接描述脚本文件"></a>新建一个链接描述脚本文件</h2><p>文件名为 ram.ld，文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MEMORY</span><br><span class="line">	&#123;</span><br><span class="line">	ram(wrx)	:ORIGIN &#x3D; 0x00000000, LENGTH &#x3D; 0x00001000</span><br><span class="line">&#125;</span><br><span class="line">SECTIONS&#123;</span><br><span class="line">	.text :</span><br><span class="line">	&#123;</span><br><span class="line">		*(.test)</span><br><span class="line">	&#125; &gt; ram</span><br><span class="line"></span><br><span class="line">	.data :</span><br><span class="line">	&#123;</span><br><span class="line">		*(.data)</span><br><span class="line">	&#125; &gt; ram</span><br><span class="line"></span><br><span class="line">	.bss :</span><br><span class="line">	&#123;</span><br><span class="line">		*(.bss)</span><br><span class="line">	&#125; &gt; ram</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ENTRY (_start)</span><br></pre></td></tr></table></figure>

<p>其中定义了一个存储块——ram，并且权限为wrx，wrx在Linux中表示可读、可写以及可运行（我个人的理解，并且没有这个就不能使用），其起始地址为0x0，长度为0x1000，然后只是编译器输出文件包含三个Section，分别是 .text、.data、.bss，这三个Section从ram的起始地址开始依次存放，并且与输入文件中的这三个Section意义对应，最后的ENTRY指定程序的入口地址，也就是前面汇编程序中定义的那个全局符号 _start</p>
<h3 id="链接-1"><a href="#链接-1" class="headerlink" title="链接"></a>链接</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mips-linux-gnu-ld -T ram.ld inst_rom.o -o inst_rom.om</span><br></pre></td></tr></table></figure>

<h1 id="得到对应的机器码"><a href="#得到对应的机器码" class="headerlink" title="得到对应的机器码"></a>得到对应的机器码</h1><h2 id="获取反编译文件"><a href="#获取反编译文件" class="headerlink" title="获取反编译文件"></a>获取反编译文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mips-linux-gnu-objdump inst_rom.om inst_rom.asm</span><br></pre></td></tr></table></figure>

<p>书上是用的 objcopy得到 二进制文件，然后用他的那个工具从中提取出机器码的内容，因为我是看的电子书，没有光盘，在网上也没找到那个小程序，所以只能改为使用 objdump 获取反编译文件</p>
<h2 id="利用小程序提取机器码"><a href="#利用小程序提取机器码" class="headerlink" title="利用小程序提取机器码"></a>利用小程序提取机器码</h2><p>小程序的获取：百度云链接：<a href="https://pan.baidu.com/s/1uFx2Oae7EMfTz_M0a9hMRA" target="_blank" rel="noopener">https://pan.baidu.com/s/1uFx2Oae7EMfTz_M0a9hMRA</a><br>提取码：2fh3 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.myfun.exe inst_rom.asm inst_rom.data</span><br></pre></td></tr></table></figure>

<p>最后生成的inst_rom.data中就是我们需要的机器码文件了</p>
<h1 id="通过Makefile来简化操作"><a href="#通过Makefile来简化操作" class="headerlink" title="通过Makefile来简化操作"></a>通过Makefile来简化操作</h1><p>从一个汇编程序打机器码文件，需要四步操作：编译、链接、反编译、提取，有些繁琐，如果对输入文件以及输出文件的名称没有要求的话，可以使用Makefile来简化操作，如果有要求，也可以通过修改Makefile来完成操作，相对来说也很简便</p>
<h2 id="编写Makefile文件"><a href="#编写Makefile文件" class="headerlink" title="编写Makefile文件"></a>编写Makefile文件</h2><p>新建一个文件，名为Makefile，文件内容如下</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ifndef</span> CROSS_COMPILE                              </span><br><span class="line">CROSS_COMPILE = mips-linux-gnu-</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line">CC = <span class="variable">$(CROSS_COMPILE)</span>as</span><br><span class="line">LD = <span class="variable">$(CROSS_COMPILE)</span>ld</span><br><span class="line">OBJDUMP = <span class="variable">$(CROSS_COMPILE)</span>objdump</span><br><span class="line">OBJECTS = inst_rom.o</span><br><span class="line"><span class="keyword">export</span> CROSS_COMPILE</span><br><span class="line"><span class="comment"># 前面的应该都好理解，就是一些别名</span></span><br><span class="line"><span class="section">all:inst_rom.data			# 最后要获取的文件</span></span><br><span class="line"><span class="section">inst_rom.o: inst_rom.S		# <span class="variable">$&lt;</span>表示输入文件， <span class="variable">$@</span>表示输出文件</span></span><br><span class="line">    <span class="variable">$(CC)</span> -mips32 <span class="variable">$&lt;</span> -o <span class="variable">$@</span>	<span class="comment"># $&lt; 对应inst_rom.S，$@对应inst_rom.o</span></span><br><span class="line"><span class="section">inst_rom.om: ram.ld <span class="variable">$(OBJECTS)</span></span></span><br><span class="line">    <span class="variable">$(LD)</span> -T ram.ld <span class="variable">$(OBJECTS)</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="section">inst_rom.asm: inst_rom.om</span></span><br><span class="line">    <span class="variable">$(OBJDUMP)</span> -D <span class="variable">$&lt;</span> &gt; <span class="variable">$@</span></span><br><span class="line"><span class="section">inst_rom.data: inst_rom.asm</span></span><br><span class="line">    ./myfun.exe <span class="variable">$&lt;</span> <span class="variable">$@</span></span><br><span class="line"></span><br><span class="line"><span class="section">build:</span></span><br><span class="line">    touch inst_rom.data</span><br><span class="line"><span class="section">clean:	# make clean时清除以下文件</span></span><br><span class="line">    rm -f *.o *.om *.asm *.data</span><br></pre></td></tr></table></figure>

<p>在makefile中最后要获取的是inst_rom.data文件，而获取inst_rom.data需要inst_rom.asm文件，所以执行 ./myfun 那一步操作，而inst_rom.asm选哟inst_rom.om ，以此类推依次执行makefile中的内容</p>
<p>以后在命令行使用make就可以完成所有的操作了</p>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora + PicGo + Github 无缝完成写博客操作</title>
    <url>/2020/03/24/Typora%20+%20PicGo%20+%20Github%20%E6%97%A0%E7%BC%9D%E5%AE%8C%E6%88%90%E5%86%99%E5%8D%9A%E5%AE%A2%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Typora-PicGo-Github-无缝完成写博客操作"><a href="#Typora-PicGo-Github-无缝完成写博客操作" class="headerlink" title="Typora + PicGo + Github 无缝完成写博客操作"></a>Typora + PicGo + Github 无缝完成写博客操作</h1><h2 id="一、什么是无缝操作"><a href="#一、什么是无缝操作" class="headerlink" title="一、什么是无缝操作"></a>一、什么是无缝操作</h2><p>无缝操作就是在 Typora 本地就完成写博客的操作，不需要去其他地方上传图片到图床再复制连接，在 Typora 内就能完成上传图片到图床的操作</p>
<p>相比其他网页编辑博客，Typora的访问速度更快，并且可以随时随地写博客，缺点就是图片只能保存在本地，不过在 Typora 更新之后，就可以使用 PicGo 直接上传图片到图床了</p>
<blockquote>
<p>图床：图片保存在一个网站上，这样就可以在任何地方通过链接获取图片了，与markdown简直是绝配</p>
</blockquote>
<a id="more"></a>

<h2 id="二、实现无缝操作"><a href="#二、实现无缝操作" class="headerlink" title="二、实现无缝操作"></a>二、实现无缝操作</h2><h3 id="PicGo的安装与配置"><a href="#PicGo的安装与配置" class="headerlink" title="PicGo的安装与配置"></a>PicGo的安装与配置</h3><p>下载PicGo：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a></p>
<p>打开之后会出现类似的图片：</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/20200324173631.png" alt=""></p>
<p>在设置中将端口设置为36677</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200324174707247.png" alt="image-20200324174707247"></p>
<p>这样，PicGo的设置就告一段落了</p>
<h3 id="将-Github-作为免费图床"><a href="#将-Github-作为免费图床" class="headerlink" title="将 Github 作为免费图床"></a>将 Github 作为免费图床</h3><p>首先创建一个新的仓库</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200324175141172.png" alt="image-20200324175141172"></p>
<p>然后在 Github 的设置中创建一个tocken，这个tocken只出现一次，注意保存</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200324175704641.png" alt="image-20200324175704641"></p>
<p>下面就是tocken</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200324175845451.png" alt="image-20200324175845451"></p>
<p>然后回到 PicGo中，设置 Github 图床</p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200324175948813.png" alt="image-20200324175948813"></p>
<blockquote>
<p>仓库名就是刚才创建的那个图床仓库，按照你自己创建的仓库名填</p>
<p>分支名就是master</p>
<p>Tocken：刚才生成的tocken</p>
<p>指定存储路径就是在仓库中图片存放的位置</p>
<p>自定义域名就是<a href="https://raw.githubusercontent.com/Pipepw/FigureBed/master，把中间的Pipepw/FigureBed换成你自己的仓库名就行，后面的master不要少了，这个自定义域名就是后面上传图片之后，对图片进行访问所需要的，上传失败则检查一下" target="_blank" rel="noopener">https://raw.githubusercontent.com/Pipepw/FigureBed/master，把中间的Pipepw/FigureBed换成你自己的仓库名就行，后面的master不要少了，这个自定义域名就是后面上传图片之后，对图片进行访问所需要的，上传失败则检查一下</a></p>
</blockquote>
<h3 id="Typora的安装与配置"><a href="#Typora的安装与配置" class="headerlink" title="Typora的安装与配置"></a>Typora的安装与配置</h3><p>下载安装 Typora：<a href="https://typora.io/" target="_blank" rel="noopener">Typora</a></p>
<p><img src="https://raw.githubusercontent.com/Pipepw/FigureBed/master/blog_files/img/PicGo-Github-PicBed/image-20200324194721349.png" alt="image-20200324194721349"></p>
<p>设置使用PicGo进行上传，最后验证一下是否能够上传</p>
<p>这样，我们就可以在插入图片的时候选择上传到图床了，如果希望直接上传，那么就改变上面插入图片的选项</p>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>配置环境</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
